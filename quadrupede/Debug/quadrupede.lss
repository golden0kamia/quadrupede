
quadrupede.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b04  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a9  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044b  00000000  00000000  00001579  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  000019c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b5  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000501  00000000  00000000  00001e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002366  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 eb       	ldi	r30, 0xB8	; 184
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  9e:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <senduart>:
char beta(int x, int y){
	return -2*asin(sqrt(x*x+y*y)/10)*2*M_PI+180;
}

void senduart(char txt){
	while(!(UCSR0A & (1<<UDRE0))){}
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 ff       	sbrs	r25, 5
  ae:	fd cf       	rjmp	.-6      	; 0xaa <senduart+0x4>
	UDR0 = txt;
  b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  b4:	08 95       	ret

000000b6 <writeLED>:
}

void writeLED(char led){
	PINC |= 1<<CE;
  b6:	31 9a       	sbi	0x06, 1	; 6
	for(int i; i<8; i++){
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
		if(led & (1<<i)){
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	ac 01       	movw	r20, r24
  c0:	02 2e       	mov	r0, r18
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <writeLED+0x12>
  c4:	55 95       	asr	r21
  c6:	47 95       	ror	r20
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <writeLED+0xe>
  cc:	40 ff       	sbrs	r20, 0
  ce:	1c c0       	rjmp	.+56     	; 0x108 <writeLED+0x52>
			PINC |= 1<<DATA;
  d0:	32 9a       	sbi	0x06, 2	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	41 e2       	ldi	r20, 0x21	; 33
  d4:	4a 95       	dec	r20
  d6:	f1 f7       	brne	.-4      	; 0xd4 <writeLED+0x1e>
  d8:	00 00       	nop
		}
		_delay_us(100);
		PINC |= 1<<CLK;
  da:	30 9a       	sbi	0x06, 0	; 6
  dc:	41 e2       	ldi	r20, 0x21	; 33
  de:	4a 95       	dec	r20
  e0:	f1 f7       	brne	.-4      	; 0xde <writeLED+0x28>
  e2:	00 00       	nop
		_delay_us(100);
		if(led & (1<<i)){
			PINC |= 1<<DATA;
  e4:	32 9a       	sbi	0x06, 2	; 6
  e6:	41 e2       	ldi	r20, 0x21	; 33
  e8:	4a 95       	dec	r20
  ea:	f1 f7       	brne	.-4      	; 0xe8 <writeLED+0x32>
  ec:	00 00       	nop
		}
		_delay_us(100);
		PINC |= 1<<CLK;
  ee:	30 9a       	sbi	0x06, 0	; 6
  f0:	41 e2       	ldi	r20, 0x21	; 33
  f2:	4a 95       	dec	r20
  f4:	f1 f7       	brne	.-4      	; 0xf2 <writeLED+0x3c>
  f6:	00 00       	nop
	UDR0 = txt;
}

void writeLED(char led){
	PINC |= 1<<CE;
	for(int i; i<8; i++){
  f8:	2f 5f       	subi	r18, 0xFF	; 255
  fa:	3f 4f       	sbci	r19, 0xFF	; 255
  fc:	28 30       	cpi	r18, 0x08	; 8
  fe:	31 05       	cpc	r19, r1
 100:	f1 f6       	brne	.-68     	; 0xbe <writeLED+0x8>
		}
		_delay_us(100);
		PINC |= 1<<CLK;
		_delay_us(100);
	}
	PINC |= 1<<CE;
 102:	31 9a       	sbi	0x06, 1	; 6
 104:	00 00       	nop
	_delay_us(1);
}
 106:	08 95       	ret
 108:	41 e2       	ldi	r20, 0x21	; 33
 10a:	4a 95       	dec	r20
 10c:	f1 f7       	brne	.-4      	; 0x10a <writeLED+0x54>
 10e:	00 00       	nop
	for(int i; i<8; i++){
		if(led & (1<<i)){
			PINC |= 1<<DATA;
		}
		_delay_us(100);
		PINC |= 1<<CLK;
 110:	30 9a       	sbi	0x06, 0	; 6
 112:	41 e2       	ldi	r20, 0x21	; 33
 114:	4a 95       	dec	r20
 116:	f1 f7       	brne	.-4      	; 0x114 <writeLED+0x5e>
 118:	00 00       	nop
 11a:	e5 cf       	rjmp	.-54     	; 0xe6 <writeLED+0x30>

0000011c <main>:
int baud = 9600;
char txt;

int main(void)
{
	DDRC |= (1<<CLK)|(1<<CE)|(1<<DATA)|(1<<RESET)|(1<<RS);
 11c:	87 b1       	in	r24, 0x07	; 7
 11e:	8f 61       	ori	r24, 0x1F	; 31
 120:	87 b9       	out	0x07, r24	; 7
	PINC |= (1<<CE)|(1<<RESET);
 122:	86 b1       	in	r24, 0x06	; 6
 124:	8a 60       	ori	r24, 0x0A	; 10
 126:	86 b9       	out	0x06, r24	; 6
	DDRD |= (1<<PIND1)|(1<<PIND7);
 128:	8a b1       	in	r24, 0x0a	; 10
 12a:	82 68       	ori	r24, 0x82	; 130
 12c:	8a b9       	out	0x0a, r24	; 10
	UCSR0A = 1<<U2X0;
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
 134:	88 e1       	ldi	r24, 0x18	; 24
 136:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
 13a:	86 e0       	ldi	r24, 0x06	; 6
 13c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = 12;
 140:	8c e0       	ldi	r24, 0x0C	; 12
 142:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	//DDRD |= (1<<PIND1);
	
	char cmd;
	PINC |= 1<<RESET;
 146:	33 9a       	sbi	0x06, 3	; 6
 148:	81 e2       	ldi	r24, 0x21	; 33
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0x2e>
 14e:	00 00       	nop
	_delay_us(100);
	PINC |= 1<<RESET;
 150:	33 9a       	sbi	0x06, 3	; 6
	
    while (1) 
    {
		if((UCSR0A & (1<<RXC0))){
 152:	c0 ec       	ldi	r28, 0xC0	; 192
 154:	d0 e0       	ldi	r29, 0x00	; 0
			switch(UDR0)
 156:	06 ec       	ldi	r16, 0xC6	; 198
 158:	10 e0       	ldi	r17, 0x00	; 0
	_delay_us(100);
	PINC |= 1<<RESET;
	
    while (1) 
    {
		if((UCSR0A & (1<<RXC0))){
 15a:	88 81       	ld	r24, Y
 15c:	88 23       	and	r24, r24
 15e:	34 f5       	brge	.+76     	; 0x1ac <main+0x90>
			switch(UDR0)
 160:	f8 01       	movw	r30, r16
 162:	80 81       	ld	r24, Z
 164:	82 33       	cpi	r24, 0x32	; 50
 166:	99 f0       	breq	.+38     	; 0x18e <main+0x72>
 168:	28 f4       	brcc	.+10     	; 0x174 <main+0x58>
 16a:	80 33       	cpi	r24, 0x30	; 48
 16c:	41 f0       	breq	.+16     	; 0x17e <main+0x62>
 16e:	81 33       	cpi	r24, 0x31	; 49
 170:	51 f0       	breq	.+20     	; 0x186 <main+0x6a>
 172:	19 c0       	rjmp	.+50     	; 0x1a6 <main+0x8a>
 174:	83 33       	cpi	r24, 0x33	; 51
 176:	79 f0       	breq	.+30     	; 0x196 <main+0x7a>
 178:	84 33       	cpi	r24, 0x34	; 52
 17a:	89 f0       	breq	.+34     	; 0x19e <main+0x82>
 17c:	14 c0       	rjmp	.+40     	; 0x1a6 <main+0x8a>
			{
			case '0' :
				senduart('V');
 17e:	86 e5       	ldi	r24, 0x56	; 86
 180:	0e 94 53 00 	call	0xa6	; 0xa6 <senduart>
				break;
 184:	13 c0       	rjmp	.+38     	; 0x1ac <main+0x90>
			case '1' :
				senduart('U');
 186:	85 e5       	ldi	r24, 0x55	; 85
 188:	0e 94 53 00 	call	0xa6	; 0xa6 <senduart>
				break;
 18c:	0f c0       	rjmp	.+30     	; 0x1ac <main+0x90>
			case '2' :
				senduart('D');
 18e:	84 e4       	ldi	r24, 0x44	; 68
 190:	0e 94 53 00 	call	0xa6	; 0xa6 <senduart>
				break;
 194:	0b c0       	rjmp	.+22     	; 0x1ac <main+0x90>
			case '3' :
				senduart('L');
 196:	8c e4       	ldi	r24, 0x4C	; 76
 198:	0e 94 53 00 	call	0xa6	; 0xa6 <senduart>
				break;
 19c:	07 c0       	rjmp	.+14     	; 0x1ac <main+0x90>
			case '4' :
				senduart('R');
 19e:	82 e5       	ldi	r24, 0x52	; 82
 1a0:	0e 94 53 00 	call	0xa6	; 0xa6 <senduart>
				break;
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <main+0x90>
			default:
				senduart('#');
 1a6:	83 e2       	ldi	r24, 0x23	; 35
 1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <senduart>
				break;
			}
		}
		writeLED(0b01111110);
 1ac:	8e e7       	ldi	r24, 0x7E	; 126
 1ae:	0e 94 5b 00 	call	0xb6	; 0xb6 <writeLED>
    }
 1b2:	d3 cf       	rjmp	.-90     	; 0x15a <main+0x3e>

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
