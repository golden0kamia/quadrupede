
quadrupede.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000084  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000108  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d3  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000590  00000000  00000000  0000085b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031c  00000000  00000000  00000deb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001108  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000300  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a1  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001619  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	27 c0       	rjmp	.+78     	; 0x80 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:
char alpha(int x, int y);
char beta(int x, int y);

int main(void)
{
	UCSRA = 0;
  34:	1b b8       	out	0x0b, r1	; 11
	UCSRB = (1<<TXEN)|(1<<RXEN);
  36:	88 e1       	ldi	r24, 0x18	; 24
  38:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (3<<UCSZ0);
  3a:	86 e0       	ldi	r24, 0x06	; 6
  3c:	83 b9       	out	0x03, r24	; 3
	UBRRL = 0b00110000;//0b
  3e:	80 e3       	ldi	r24, 0x30	; 48
  40:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;
  42:	12 b8       	out	0x02, r1	; 2
	DDRB = 255;
  44:	8f ef       	ldi	r24, 0xFF	; 255
  46:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1<<PD1);
  48:	89 9a       	sbi	0x11, 1	; 17
	char cmd = '1';*/
	
    while (1) 
    {
		while(!(UCSRA & (1<<UDRE)));
		UDR = 76;
  4a:	8c e4       	ldi	r24, 0x4C	; 76
		while(!(UCSRA & (1<<UDRE)));
		UDR = 79;
  4c:	2f e4       	ldi	r18, 0x4F	; 79
		while(!(UCSRA & (1<<UDRE)));
		UDR = 76;
		while(!(UCSRA & (1<<UDRE)));
		UDR = 10;
  4e:	9a e0       	ldi	r25, 0x0A	; 10
	int speed;
	char cmd = '1';*/
	
    while (1) 
    {
		while(!(UCSRA & (1<<UDRE)));
  50:	5d 9b       	sbis	0x0b, 5	; 11
  52:	fe cf       	rjmp	.-4      	; 0x50 <__SREG__+0x11>
		UDR = 76;
  54:	8c b9       	out	0x0c, r24	; 12
		while(!(UCSRA & (1<<UDRE)));
  56:	5d 9b       	sbis	0x0b, 5	; 11
  58:	fe cf       	rjmp	.-4      	; 0x56 <__SREG__+0x17>
		UDR = 79;
  5a:	2c b9       	out	0x0c, r18	; 12
		while(!(UCSRA & (1<<UDRE)));
  5c:	5d 9b       	sbis	0x0b, 5	; 11
  5e:	fe cf       	rjmp	.-4      	; 0x5c <__SREG__+0x1d>
		UDR = 76;
  60:	8c b9       	out	0x0c, r24	; 12
		while(!(UCSRA & (1<<UDRE)));
  62:	5d 9b       	sbis	0x0b, 5	; 11
  64:	fe cf       	rjmp	.-4      	; 0x62 <__SREG__+0x23>
		UDR = 10;
  66:	9c b9       	out	0x0c, r25	; 12
		while(!(UCSRA & (1<<UDRE)));
  68:	5d 9b       	sbis	0x0b, 5	; 11
  6a:	fe cf       	rjmp	.-4      	; 0x68 <__SREG__+0x29>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6c:	3f ef       	ldi	r19, 0xFF	; 255
  6e:	49 e6       	ldi	r20, 0x69	; 105
  70:	58 e1       	ldi	r21, 0x18	; 24
  72:	31 50       	subi	r19, 0x01	; 1
  74:	40 40       	sbci	r20, 0x00	; 0
  76:	50 40       	sbci	r21, 0x00	; 0
  78:	e1 f7       	brne	.-8      	; 0x72 <__SREG__+0x33>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <__SREG__+0x3d>
  7c:	00 00       	nop
  7e:	e8 cf       	rjmp	.-48     	; 0x50 <__SREG__+0x11>

00000080 <_exit>:
  80:	f8 94       	cli

00000082 <__stop_program>:
  82:	ff cf       	rjmp	.-2      	; 0x82 <__stop_program>
