
quadrupede.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001a2  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009cc  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ab  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000374  00000000  00000000  00001447  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  000017bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bb  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000388  00000000  00000000  00001c53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001fdb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  9e:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <senduart>:
char beta(int x, int y){
	return -2*asin(sqrt(x*x+y*y)/10)*2*M_PI+180;
}

void senduart(char txt){
	while(!(UCSR0A & (1<<UDRE0))){}
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 ff       	sbrs	r25, 5
  ae:	fd cf       	rjmp	.-6      	; 0xaa <senduart+0x4>
	UDR0 = txt;
  b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  b4:	08 95       	ret

000000b6 <main>:
int baud = 9600;
char txt;

int main(void)
{
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
  b6:	88 e1       	ldi	r24, 0x18	; 24
  b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = F_CPU/(16*baud)+1;
  c2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
  c6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
  ca:	22 95       	swap	r18
  cc:	32 95       	swap	r19
  ce:	30 7f       	andi	r19, 0xF0	; 240
  d0:	32 27       	eor	r19, r18
  d2:	20 7f       	andi	r18, 0xF0	; 240
  d4:	32 27       	eor	r19, r18
  d6:	03 2e       	mov	r0, r19
  d8:	00 0c       	add	r0, r0
  da:	44 0b       	sbc	r20, r20
  dc:	55 0b       	sbc	r21, r21
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	72 e1       	ldi	r23, 0x12	; 18
  e2:	8a e7       	ldi	r24, 0x7A	; 122
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 ad 00 	call	0x15a	; 0x15a <__udivmodsi4>
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	82 0f       	add	r24, r18
  ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	DDRD |= (1<<PIND1);
  f2:	51 9a       	sbi	0x0a, 1	; 10
		while(!(UCSR0A & (1<<UDRE0))){}
		UDR0 = 'L';
		while(!(UCSR0A & (1<<UDRE0))){}
		UDR0 = '\n';
		_delay_ms(1000);*/
		if((UCSR0A & (1<<UDRE0))){
  f4:	c0 ec       	ldi	r28, 0xC0	; 192
  f6:	d0 e0       	ldi	r29, 0x00	; 0
			cmd = UDR0;
  f8:	06 ec       	ldi	r16, 0xC6	; 198
  fa:	10 e0       	ldi	r17, 0x00	; 0
		while(!(UCSR0A & (1<<UDRE0))){}
		UDR0 = 'L';
		while(!(UCSR0A & (1<<UDRE0))){}
		UDR0 = '\n';
		_delay_ms(1000);*/
		if((UCSR0A & (1<<UDRE0))){
  fc:	88 81       	ld	r24, Y
  fe:	85 ff       	sbrs	r24, 5
 100:	22 c0       	rjmp	.+68     	; 0x146 <main+0x90>
			cmd = UDR0;
 102:	f8 01       	movw	r30, r16
 104:	80 81       	ld	r24, Z
		}
		switch(cmd)
 106:	82 33       	cpi	r24, 0x32	; 50
 108:	99 f0       	breq	.+38     	; 0x130 <main+0x7a>
 10a:	28 f4       	brcc	.+10     	; 0x116 <main+0x60>
 10c:	80 33       	cpi	r24, 0x30	; 48
 10e:	41 f0       	breq	.+16     	; 0x120 <main+0x6a>
 110:	81 33       	cpi	r24, 0x31	; 49
 112:	51 f0       	breq	.+20     	; 0x128 <main+0x72>
 114:	18 c0       	rjmp	.+48     	; 0x146 <main+0x90>
 116:	83 33       	cpi	r24, 0x33	; 51
 118:	79 f0       	breq	.+30     	; 0x138 <main+0x82>
 11a:	84 33       	cpi	r24, 0x34	; 52
 11c:	89 f0       	breq	.+34     	; 0x140 <main+0x8a>
 11e:	13 c0       	rjmp	.+38     	; 0x146 <main+0x90>
		{
		case '0' :
			senduart('V');
 120:	86 e5       	ldi	r24, 0x56	; 86
 122:	0e 94 53 00 	call	0xa6	; 0xa6 <senduart>
			break;
 126:	0f c0       	rjmp	.+30     	; 0x146 <main+0x90>
		case '1' :
			senduart('U');
 128:	85 e5       	ldi	r24, 0x55	; 85
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <senduart>
			break;
 12e:	0b c0       	rjmp	.+22     	; 0x146 <main+0x90>
		case '2' :
			senduart('D');
 130:	84 e4       	ldi	r24, 0x44	; 68
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <senduart>
			break;
 136:	07 c0       	rjmp	.+14     	; 0x146 <main+0x90>
		case '3' :
			senduart('L');
 138:	8c e4       	ldi	r24, 0x4C	; 76
 13a:	0e 94 53 00 	call	0xa6	; 0xa6 <senduart>
			break;
 13e:	03 c0       	rjmp	.+6      	; 0x146 <main+0x90>
		case '4' :
			senduart('R');
 140:	82 e5       	ldi	r24, 0x52	; 82
 142:	0e 94 53 00 	call	0xa6	; 0xa6 <senduart>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	ff ef       	ldi	r31, 0xFF	; 255
 148:	29 e6       	ldi	r18, 0x69	; 105
 14a:	88 e1       	ldi	r24, 0x18	; 24
 14c:	f1 50       	subi	r31, 0x01	; 1
 14e:	20 40       	sbci	r18, 0x00	; 0
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x96>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0xa0>
 156:	00 00       	nop
 158:	d1 cf       	rjmp	.-94     	; 0xfc <main+0x46>

0000015a <__udivmodsi4>:
 15a:	a1 e2       	ldi	r26, 0x21	; 33
 15c:	1a 2e       	mov	r1, r26
 15e:	aa 1b       	sub	r26, r26
 160:	bb 1b       	sub	r27, r27
 162:	fd 01       	movw	r30, r26
 164:	0d c0       	rjmp	.+26     	; 0x180 <__udivmodsi4_ep>

00000166 <__udivmodsi4_loop>:
 166:	aa 1f       	adc	r26, r26
 168:	bb 1f       	adc	r27, r27
 16a:	ee 1f       	adc	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	a2 17       	cp	r26, r18
 170:	b3 07       	cpc	r27, r19
 172:	e4 07       	cpc	r30, r20
 174:	f5 07       	cpc	r31, r21
 176:	20 f0       	brcs	.+8      	; 0x180 <__udivmodsi4_ep>
 178:	a2 1b       	sub	r26, r18
 17a:	b3 0b       	sbc	r27, r19
 17c:	e4 0b       	sbc	r30, r20
 17e:	f5 0b       	sbc	r31, r21

00000180 <__udivmodsi4_ep>:
 180:	66 1f       	adc	r22, r22
 182:	77 1f       	adc	r23, r23
 184:	88 1f       	adc	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	1a 94       	dec	r1
 18a:	69 f7       	brne	.-38     	; 0x166 <__udivmodsi4_loop>
 18c:	60 95       	com	r22
 18e:	70 95       	com	r23
 190:	80 95       	com	r24
 192:	90 95       	com	r25
 194:	9b 01       	movw	r18, r22
 196:	ac 01       	movw	r20, r24
 198:	bd 01       	movw	r22, r26
 19a:	cf 01       	movw	r24, r30
 19c:	08 95       	ret

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
